"""Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать, какие символы в секретных
зашифрованных посланиях употребляются чаще других. Для удобства изучения Вовочка хочет получить графическое
представление встречаемости символов. Поэтому он хочет построить гистограмму количества символов в сообщении.
Гистограмма — это график, в котором каждому символу, встречающемуся в сообщении хотя бы один раз, соответствует
столбик, высота которого пропорциональна количеству этих символов в сообщении.

Формат ввода
Входной файл содержит зашифрованный текст сообщения. Он содержит строчные и прописные латинские буквы, цифры,
знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»), пробелы и переводы строк. Размер входного файла не
превышает 10000 байт. Текст содержит хотя бы один непробельный символ. Все строки входного файла не длиннее 200
символов.Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество которых
должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему.
Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец
были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

Формат вывода
Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество которых должно
быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему.
Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец
были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов. """


def hystogram(data, sourceFile=None):
    symbols = {}
    stoplist = [' ', '\n']
    unique = set(data)
    for i in unique:
        if i not in stoplist:
            count = data.count(i)
            symbols[i] = count
    sortedsymbols = dict(sorted(symbols.items()))

    my_list = []
    for j in sortedsymbols:
        if type(sortedsymbols[j]) == int:
            my_list.append(sortedsymbols[j])
    max_value = max(my_list)

    for_print = []
    for el in sortedsymbols:
        for_print.append(f"{' ' * (max_value - sortedsymbols[el])}{'#' * sortedsymbols[el]}{el}")

    i, line = 0, []
    while i <= max_value:
        for k in for_print:
            line += k[i]
        print(*line, sep='', file=sourceFile)
        i += 1
        line = []


with open("input.txt", "r") as file:
    i = file.readline()
    data = i
    for i in file:
        data += i

with open("output.txt", "w") as file:
    str(hystogram(data, file))
